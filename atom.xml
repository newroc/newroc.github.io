<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iZheTeng]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://newroc.github.io/"/>
  <updated>2014-07-08T08:18:11.100Z</updated>
  <id>http://newroc.github.io/</id>
  
  <author>
    <name><![CDATA[Newroc]]></name>
    <email><![CDATA[newroc@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[多个ActiveMQ Broker实现互相连接]]></title>
    <link href="http://newroc.github.io/2014/05/10/%E5%A4%9A%E4%B8%AAActiveMQ_Broker%E5%AE%9E%E7%8E%B0%E4%BA%92%E7%9B%B8%E8%BF%9E%E6%8E%A5/"/>
    <id>http://newroc.github.io/2014/05/10/多个ActiveMQ_Broker实现互相连接/</id>
    <published>2014-05-09T16:51:25.000Z</published>
    <updated>2014-06-28T11:52:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="需求">需求</h2>
<p>最近遇到一个使用 Active MQ 进行通讯的需求：</p>
<ul>
<li>一个中心系统需要与 N 个外联机构进行双向通讯</li>
<li>多家外联机构之间不需要直接通讯</li>
<li>为了使应用避免处理远程通讯，需要使用 Broker 到 Broker 的通讯 <br><a id="more"></a><br> 基本的连接方式如下图所示：<br>{<1>}<img src="ActiveMQ.png" alt=""></1></li>
</ul>
<h2 id="实现方式">实现方式</h2>
<p>如果使用 IBM WebsphereMQ 的话可以用远程队列和本地队列的方式将多个队列管理器连接起来实现。查了一下在 Active MQ 似乎没有远程队列的概念。但可以用 Network connector 实现类似的功能。以下以数据中心与外联机构 1 的连接为例说明实现的思路：</p>
<h3 id="CenterBroker 的配置">CenterBroker 的配置</h3>
<ul>
<li>修改 activemq.xml，在 broker—&gt;transportConnectors 节点下修改那么 name 为 openwire 的 transportConnector 为<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">transportConnector</span> <span class="attribute">name</span>=<span class="value">"openwire"</span> <span class="attribute">uri</span>=<span class="value">"tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span>
</pre></td></tr></table></figure></li>
<li>修改 activemq.xml，在 broker 节点下增加以下信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">networkConnectors</span>&gt;</span>
            <span class="tag">&lt;<span class="title">networkConnector</span>  <span class="attribute">name</span>=<span class="value">"CENTER.EXT1.Bridge"</span> <span class="attribute">uri</span>=<span class="value">"static:(tcp://localhost:61626)"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">staticallyIncludedDestinations</span>&gt;</span>
                   <span class="tag">&lt;<span class="title">queue</span> <span class="attribute">physicalName</span>=<span class="value">"EXT1.INQ"</span>/&gt;</span>
                <span class="tag">&lt;/<span class="title">staticallyIncludedDestinations</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">networkConnector</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">networkConnectors</span>&gt;</span>
</pre></td></tr></table></figure><br>其中 <strong><em>staticallyIncludedDestinations</em></strong> 部分限制了只有发往 <strong><em>EXT1.INQ</em></strong> 的消息才会被转到<strong><em>ExtBroker1</em></strong><h3 id="ExtBroker1 的配置">ExtBroker1 的配置</h3>
</li>
<li>修改 activemq.xml，在 broker—&gt;transportConnectors 节点下修改那么 name 为 openwire 的 transportConnector 为<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">transportConnector</span> <span class="attribute">name</span>=<span class="value">"openwire"</span> <span class="attribute">uri</span>=<span class="value">"tcp://0.0.0.0:61626?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span>
</pre></td></tr></table></figure></li>
<li>修改 activemq.xml，在 broker 节点下增加以下信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">networkConnectors</span>&gt;</span>
            <span class="tag">&lt;<span class="title">networkConnector</span>  <span class="attribute">name</span>=<span class="value">"EXT1.CENTER.Bridge"</span> <span class="attribute">uri</span>=<span class="value">"static:(tcp://localhost:61616)"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">staticallyIncludedDestinations</span>&gt;</span>
                   <span class="tag">&lt;<span class="title">queue</span> <span class="attribute">physicalName</span>=<span class="value">"CENTER.INQ"</span>/&gt;</span>
                <span class="tag">&lt;/<span class="title">staticallyIncludedDestinations</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">networkConnector</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">networkConnectors</span>&gt;</span>
</pre></td></tr></table></figure><br>同样，其中 <strong><em>staticallyIncludedDestinations</em></strong> 部分限制了只有发往 <strong><em>CENTER.INQ</em></strong> 的消息才会被转到<strong><em>CenterBroker</em></strong> 。</li>
</ul>
<h3 id="验证配置信息">验证配置信息</h3>
<ul>
<li>重新启动 <strong><em>CenterBroker</em></strong> 和<strong><em>ExtBroker1</em></strong></li>
<li>打开 <strong><em>CenterBroker</em></strong> 的 web 控制台可以看到自动创建了一个 <strong><em>EXT1.INQ</em></strong> , 同时可以注意到 <strong><em>Number Of Consumers</em></strong> 为 1，说明已经有一个消费者了。这时候把 <strong><em>ExtBroker1</em></strong> 停掉，你会发现 <strong><em>Number Of Consumers</em></strong> 变成为 0 了。说明这个队列的 Consumer 就是<strong><em>ExtBroker1</em></strong>。<br>{<2>}<img src="CenterBroker1.png" alt=""></2></li>
<li>同样打开 <strong><em>ExtBroker1</em></strong> 的 web 控制台也能看到自动创建了一个 <strong><em>CENTER.INQ</em></strong> 的队列。</li>
</ul>
<p>看到这些就说明配置成功了。</p>
<h2 id="测试">测试</h2>
<p>接下来，我们测试一下从 <strong><em>CenterBroker</em></strong>向 <strong><em>ExtBroker1</em></strong> 的 <strong><em>EXT1.INQ</em></strong> 发送报文：<br>Tester.java</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;
<span class="keyword">import</span> org.apache.activemq.command.ActiveMQQueue;
<span class="keyword">import</span> javax.jms.*;
<span class="javadoc">/**
 * Created by newroc@gmail.com on 14-5-15.
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> {</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {<span class="keyword">try</span> {QueueConnectionFactory QCF = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://127.0.0.1:61616"</span>);
            Queue ext1Q = <span class="keyword">new</span> ActiveMQQueue(<span class="string">"EXT1.INQ"</span>);
            QueueConnection centerConn = QCF.createQueueConnection();
            centerConn.start();

            QueueSession centerSession = centerConn.createQueueSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);
            QueueSender centerSender = centerSession.createSender(ext1Q);
            TextMessage message=centerSession.createTextMessage(<span class="string">"测试报文,from Center to ext1"</span>);
            centerSender.send(message);

        }<span class="keyword">catch</span>(Exception e){e.printStackTrace();
        }
    }
    }
</pre></td></tr></table></figure></p>
<ul>
<li>执行以上测试代码后你会发现 CenterBroker 的 <strong><em>Messages Enqueued</em></strong> 和<strong><em>Messages Dequeued</em></strong>均为 1，<strong><em>Number Of Pending Messages</em></strong>为 0，说明该队列曾收到了一个消息，并且该消息已经被取走了。<br>{<3>}<img src="CenterBroker2.png" alt=""></3></li>
<li>然后打开 <strong><em>ExtBroker1</em></strong> 的 web 控制台，你会发现，<strong><em>Number Of Pending Messages</em></strong>为 1，查看消息内容确定是从 CenterBroker 发过来的消息。<br>{<4>}<img src="ExtBroker1.png" alt=""><br>{<5>}<img src="ExtBroker2.png" alt=""></5></4></li>
</ul>
<p>说明这种方式可以实现需求。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="需求">需求</h2>
<p>最近遇到一个使用 Active MQ 进行通讯的需求：</p>
<ul>
<li>一个中心系统需要与 N 个外联机构进行双向通讯</li>
<li>多家外联机构之间不需要直接通讯</li>
<li>为了使应用避免处理远程通讯，需要使用 Broker 到 Broker 的通讯 <br>]]></summary>
    
      <category term="ActiveMQ" scheme="http://newroc.github.io/tags/ActiveMQ/"/>
    
      <category term="工具箱" scheme="http://newroc.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MongoDB笔记之副本集]]></title>
    <link href="http://newroc.github.io/2014/03/28/MongoDB%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <id>http://newroc.github.io/2014/03/28/MongoDB笔记之副本集/</id>
    <published>2014-03-27T16:44:19.000Z</published>
    <updated>2014-06-28T11:52:45.000Z</updated>
    <content type="html"><![CDATA[<h2 id="目的"> 目的 </h2>
<p>mongodb 支持两种复制模式：</p>
<ol>
<li> 主从复制（Master-Slave）</li>
<li> 副本集（Replica Set）</li>
</ol>
<p> 我们下面主要介绍副本集模式，mongodb 副本集有以下几个作用 </p>
<ol>
<li> 可以将主库中的数据异步的复制到多个从库中从而实现数据冗余 </li>
<li> 可以通过读写分离分散使从库分担主库的压力 </li>
<li> 当主库出现故障时可以进行故障转移 <a id="more"></a>

</li>
</ol>
<h2 id="创建副本集"> 创建副本集 </h2>
<h3 id="生成 key"> 生成 key</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">"myrs1key"</span> &gt; key1
<span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">"myrs1key"</span> &gt; key2
<span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">"myrs1key"</span> &gt; key3
<span class="built_in">sudo</span> chmod <span class="number">600</span> /var/mongo/keys/*
</pre></td></tr></table></figure>

<blockquote>
<p> 修改权限可以避免出现以下问题：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>(Tue Apr  <span class="number">8</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">05.399</span> permissions on /var/mongo/keys/key1 are too open)
</pre></td></tr></table></figure>

<h3 id="启动副本集"> 启动副本集 </h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">sudo</span> mongod --replSet rs1 --keyFile=/var/mongo/keys/key1 --port <span class="number">20001</span> --dbpath=/var/mongo/data/data1 --logpath=/var/mongo/logs/log1.log --bind_ip <span class="number">192.168</span>.<span class="number">1.151</span> --fork  --rest
<span class="built_in">sudo</span> mongod --replSet rs1 --keyFile=/var/mongo/keys/key2 --port <span class="number">20002</span> --dbpath=/var/mongo/data/data2 --logpath=/var/mongo/logs/log2.log --fork
<span class="built_in">sudo</span> mongod --replSet rs1 --keyFile=/var/mongo/keys/key3 --port <span class="number">20003</span> --dbpath=/var/mongo/data/data3 --logpath=/var/mongo/logs/log3.log --fork
</pre></td></tr></table></figure>

<h3 id="配置"> 配置 </h3>
<p> 接着可以初始化副本集，首先使用命令行连接到主库，然后指定副本集的成员名称等信息，对副本集进行初始化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>mongo --port <span class="number">20001</span>
config_rs1 = {_id : <span class="string">"rs1"</span>,
    members : [{ _id:<span class="number">0</span>, host:<span class="string">"192.168.1.151:20001"</span>, priority:<span class="number">1</span> }, {_id:<span class="number">1</span>, host:<span class="string">"192.168.1.151:20002"</span> } , {_id:<span class="number">2</span>, host:<span class="string">"192.168.1.151:20003"</span> }]
}
rs.initiate(config_rs1);
</pre></td></tr></table></figure><br>&gt; 许多例子中在添加成员主机名时都填写 localhost，这样只能在本地连接，远程连接时会出现以下问题：<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>Unable <span class="built_in">to</span> connect <span class="built_in">to</span> <span class="keyword">any</span> server that satisfies <span class="operator">the</span> selector CompositeServerSelector
</pre></td></tr></table></figure>

<h3 id="增加用户"> 增加用户 </h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>use admin
db.addUser(<span class="string">"root"</span>,<span class="string">"abcdefg"</span>);
</pre></td></tr></table></figure>

<p> 重新启动 server 时增加—auth 参数 </p>
<h3 id="使用 java 访问 mongodb"> 使用 java 访问 mongodb</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>MongoClientOptions.Builder builder=MongoClientOptions.builder();
builder.requiredReplicaSetName(<span class="string">"rs1"</span>);
builder.readPreference(ReadPreference.primaryPreferred());
MongoClientOptions options=builder.build();
List&lt;MongoCredential&gt; credentialsList=<span class="keyword">new</span> ArrayList&lt;MongoCredential&gt;();
MongoCredential mongoCredential;
mongoCredential = MongoCredential.createMongoCRCredential(<span class="string">"root"</span>,<span class="string">"admin"</span>, <span class="string">"abcdefg"</span>.toCharArray());
credentialsList.add(mongoCredential);
mongoClient=<span class="keyword">new</span> MongoClient(serverAddressList,credentialsList,options);
DB db=mongoClient.getDB(dbName);
DBObject obj=<span class="keyword">new</span> BasicDBObject(<span class="string">"testKey"</span>,<span class="string">"testValue"</span>);
db.getCollection(<span class="string">"testdb"</span>).save(obj);
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<h2 id="目的"> 目的 </h2>
<p>mongodb 支持两种复制模式：</p>
<ol>
<li> 主从复制（Master-Slave）</li>
<li> 副本集（Replica Set）</li>
</ol>
<p> 我们下面主要介绍副本集模式，mongodb 副本集有以下几个作用 </p>
<ol>
<li> 可以将主库中的数据异步的复制到多个从库中从而实现数据冗余 </li>
<li> 可以通过读写分离分散使从库分担主库的压力 </li>
<li> 当主库出现故障时可以进行故障转移 ]]></summary>
    
      <category term="MongoDB" scheme="http://newroc.github.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
